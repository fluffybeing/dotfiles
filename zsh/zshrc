
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

export ITERM_24BIT=1

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi


# Open org folder
alias org="emacs $HOME/Dropbox/org/"

# Exercism
if [ -f ~/.config/exercism/exercism_completion.zsh ]; then
  . ~/.config/exercism/exercism_completion.zsh
fi

# Convert cd to cd >> ls
autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ ls -a; }

eval "$(rbenv init -)"

# Paths
export LDFLAGS="-L/usr/local/opt/ruby/lib"
export CPPFLAGS="-I/usr/local/opt/ruby/include"

export PATH="$PATH:/usr/local/opt/flutter/bin"
export PATH="$PATH:/usr/local/opt/flutter/bin/cache/dart-sdk/bin"

export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH=/usr/local/bin:$PATH

export PATH="$PATH:$(go env GOPATH)/bin"
export DYLD_FALLBACK_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_FALLBACK_LIBRARY_PATH

# JAVA
export PATH="/usr/local/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/openjdk/include"

# NVM
export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"

##############
# Utils
##############
alias kindle="/usr/local/bin/k2pdfopt"
alias hg='history | grep'

###################
#iOS  Workflow
####################
alias cs="xcrun simctl erase all"
alias spg="swift package generate-xcodeproj"
alias ddd="rm -rf ~/Library/Developer/Xcode/DerivedData"


################
# Spotify
################
alias bs=SPT_CLIENT="../client" SPT_SPTREMOTECONFIGURATION_USE_SOURCE=1 rake build:all


# run magit from a shell
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient"
alias magit="emacsclient -n -e '(magit-status)'"

# I want to limit the Xcode indexing CPU usage
limitCPU() {
  cpulimit -l 20 -p $(pgrep -f com.apple.dt.SKAgent)
}

# build flutter
fbuild() {
  flutter pub get
  flutter packages pub run build_runner build --delete-conflicting-outputs
  flutter build ios --debug --no-codesign --simulator
  flutter attach
}

# sync fork with the remote
syncf() {
  # Assumes that the git repository has upstream and remote urls set
  # Assumes that you've committed your work on your current branch
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  git checkout master
  git pull --rebase

  git push # origin

  git checkout $current_branch
  git rebase master
}

# Use lazygit
lg()
{
    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

    lazygit "$@"

    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
            cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
            rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
    fi
}

# GoLang
export GOROOT=/Users/rahulr/.go
export PATH=$GOROOT/bin:$PATH
export GOPATH=/Users/rahulr/go
export PATH=$GOPATH/bin:$PATH

export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
