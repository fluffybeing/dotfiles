# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
DISABLE_AUTO_TITLE="true"
ENABLE_CORRECTION="false"

alias gcc="nocorrect gcc"

function set_terminal_title() {
  echo -en "\e]2;$@\a"
}

# Path
export PATH="$HOME/.local/bin:$PATH"
export PATH="/opt/homebrew/opt/binutils/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/binutils/lib"
export CPPFLAGS="-I/opt/homebrew/opt/binutils/include"

# Flags for C++
export ITERM_24BIT=1

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Brew
eval "$(/opt/homebrew/bin/brew shellenv)"

# Exercism
if [ -f ~/.config/exercism/exercism_completion.zsh ]; then
  . ~/.config/exercism/exercism_completion.zsh
fi

# Convert cd to cd >> ls
autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ ls -a; }

eval "$(rbenv init -)"

# Paths
export LDFLAGS="-L/usr/local/opt/ruby/lib"
export CPPFLAGS="-I/usr/local/opt/ruby/include"
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"
export PATH=/usr/local/bin:$PATH

# Go
export PATH="$PATH:$(go env GOPATH)/bin"
export DYLD_FALLBACK_LIBRARY_PATH=/usr/local/opt/openssl/lib:$DYLD_FALLBACK_LIBRARY_PATH

# Flutter
export PATH="$PATH:/usr/local/opt/flutter/bin"
export PATH="$PATH:/usr/local/opt/flutter/bin/cache/dart-sdk/bin"

# Android
export ANDROID_HOME="/Users/rranjan/Library/Android/sdk"

# JAVA
export PATH="/usr/local/opt/openjdk/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/openjdk/include"
export PATH=$JAVA_HOME/bin:$PATH

# Python
alias python="/opt/homebrew/bin/python3"
alias pip="/opt/homebrew/bin/pip3"

# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"

##############
# Utils
##############
alias hs='history | grep'

###################
#iOS  Workflow
####################
alias cleanSimulator="xcrun simctl erase all"
alias swiftGenerateProject="swift package generate-xcodeproj"
alias ddd="rm -rf ~/Library/Developer/Xcode/DerivedData"

###################
# Library path
####################
export PATH="/Library/Developer/CommandLineTools/usr/bin:$PATH"

################
# Flir
################

###################
# Git
###################
alias gpr='git pull origin development --rebase'
alias gpp='"$(gpr)" && git push origin "$(git-branch-current 2> /dev/null)"'

gcu() {
  git switch -c "$1" upstream/master
}

################
# Neovim
################
alias vi="nvim"
alias vim="nvim"
alias view="nvim -R"
alias vimdiff="nvim -d"

lg() {
  export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir

  lazygit "$@"

  if [ -f $LAZYGIT_NEW_DIR_FILE ]; then
    cd "$(cat $LAZYGIT_NEW_DIR_FILE)"
    rm -f $LAZYGIT_NEW_DIR_FILE > /dev/null
  fi
}

# I want to limit the Xcode indexing CPU usage
limitCPU() {
  cpulimit -l 20 -p $(pgrep -f com.apple.dt.SKAgent)
}

# build flutter
fbuild() {
  flutter pub get
  flutter packages pub run build_runner build --delete-conflicting-outputs
  flutter build ios --debug --no-codesign --simulator
  flutter attach
}

# Emacs
alias org="emacs $HOME/Dropbox/org/"

# OpenSSL
export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
export PATH="/usr/local/opt/openssl@1.1/bin:$PATH"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"
